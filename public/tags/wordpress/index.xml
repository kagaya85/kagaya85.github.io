<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Wordpress on かがやの部屋</title>
    <link>https://kagaya85.github.io/tags/wordpress/</link>
    <description>Recent content in Wordpress on かがやの部屋</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Wed, 23 Sep 2020 16:47:28 +0800</lastBuildDate><atom:link href="https://kagaya85.github.io/tags/wordpress/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>使用Docker部署本地Wordpress开发环境</title>
      <link>https://kagaya85.github.io/p/2020/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0wordpress%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Wed, 23 Sep 2020 16:47:28 +0800</pubDate>
      
      <guid>https://kagaya85.github.io/p/2020/%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2%E6%9C%AC%E5%9C%B0wordpress%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>使用Docker部署本地Wordpress开发环境 为了便于维护开发线上的wordpress站点，在本地构建一个wordpress开发环境。使用Docker来实现轻量化开发与部署环境的构建。
背景 由于最近接手了一个网站的运维工作，使用的还是Wordpress，因为有涉及到一些布局的调整，因此决定在本地构建一个开发调试环境用于进行上线前的测试，但又不想离开本机中Vscode等开发环境（如代码提示等）。在考虑了包括虚拟机LANMP，本机直接构建环境等方案后，最后选择了Docker来部署开发环境，同时也可以进一步熟悉Docker的使用方法。有了Docker，免去了虚拟机中繁杂的环境配置过程，同时对环境进行模块化解耦后可以十分便捷的启动或更新开发环境组件，也使得开发环境尽可能的贴近生产环境，之后的部署上线将变得十分容易。
本机环境 MacOS 10.15.6（理论上适用于所有支持Docker的环境）
Docker Desktop 19.03.12
镜像准备 $ docker images nginx latest 7e4d58f0e5f3 12 days ago 133MB mysql 5.7.31 ef08065b0a30 13 days ago 448MB daocloud.io/library/php 7.2.24-fpm 48432d192e1a 11 months ago 398MB 由于使用了Wordpress，所以环境的搭建涉及到了三个部分，ngin、mysql以及php，为了与生产环境一致，特别选择了对应的mysql与php的版本。理论上也不建议选择latest版本的镜像，选择相对稳定的版本会有更好的兼容性。
可以从docker hub上搜索对应版本的镜像
拉取镜像 $ docker pull nginx:latest $ docker pull mysql:5.7.31 $ docker pull daocloud.io/library/php:7.2.24-fpm 构建Nginx+PHP环境 Nginx配置 Nginx的镜像是不能解析php文件的，因此我们需要为nginx配置php-fpm来负责解析处理php代码并返回处理结果。
为此，我们需要做一下几件事情：
 修改nginx的配置，指定php处理方式 通过设置使nginx能够访问到php容器 启动nginx与php的容器  首先，为了持久化配置，我在/Users/kagaya/Docker/nginx/conf.d/下新建了default.conf配置文件，挂载到目标文件/etc/nginx/conf.d:ro并指定只读属性
最后对nginx的配置文件做对应修改即可：
# default.conf server { listen 80; server_name localhost; location / { root /usr/share/nginx/html; index index.</description>
    </item>
    
  </channel>
</rss>
